# -*- coding: utf-8 -*-
"""Cashier - Final Project Pacmann

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XRXGb2sLT5je0fUG0B0R5N_XNRe8BqJC
"""

from tabulate import tabulate

#membuat class Transaction
class Transaction:
    def __init__(self):
        self.order_items = dict()

    #memasukkan nama, jumlah, dan harga item

    def add_item(self, item_name, item_qty, item_price):
        self.order_items.update({item_name: [item_qty, item_price]})

        try:
            self.item_qty = int(item_qty)
            self.item_price = int(item_price)
        except:
            print("Jumlah dan harga barang yang anda masukkan bukan angka. Mohon masukkan angka.")

    #menampilkan detail pesanan yang sudah diinput
    def show_order(self):
        show_order = []
        header = ["No.", "Nama Barang", "Jumlah", "Harga per Satuan", "Total Harga"]
        show_order.append(header)

        n = 0

        for key, value in self.order_items.items():
            n += 1
            table_no = n
            item_name = key
            item_qty = value[0]
            item_price = value[1]
            total = item_qty * item_price
            item_data = [table_no, item_name, item_qty, item_price, total]
            show_order.append(item_data)

        print(tabulate(show_order, tablefmt="fancy_grid"))

        #mengubah detail pesanan yang sudah diinput
    def update_item_name(self, item_name, item_name_new):
        temp = self.order_items[item_name]
        self.order_items.pop(item_name)
        self.order_items.update({item_name_new:temp})


    def update_item_qty(self, item_name, item_qty_new):
        self.order_items[item_name][0] = item_qty_new


    def update_item_price (self, item_name, item_price_new):
        self.order_items[item_name][1] = item_price_new

    #menghapus satu atau beberapa item yang telah diinput
    def delete_item(self, item_name):
        try:
            self.order_items.pop(item_name)
            print(f"Item {item_name} telah dihapus")
            print("")
        except KeyError:
            print(f"Item {item_name} tidak ditemukan pada daftar pesanan yang telah diinput")

    #menghapus semua item yang telah diinput
    def reset_transaction(self):
        transaction = {}
        self.order_items = transaction
        print("Semua pesanan telah dihapus. Anda belum memiliki daftar pesanan")


    #memeriksa pesanan yang telah diinput
    def check_order(self):
        for key, value in self.order_items.items():
            item_name = key
            item_qty = value[0]
            item_price = value[1]

        if type(item_name) == str and type(item_qty) == int and type(item_price) == int:
            print("Input pesanan sudah benar")
        else:
            print("Terdapat kesalahan input pesanan. Mohon periksa kembali.")


    #menghitung total diskon, total pesanan, dan total pesanan setelah diskon
    def total_order(self):
        self.total_order = 0
        for value in self.order_items.values():
            item_qty = value[0]
            item_price = value[1]
            self.total_order += (item_qty * item_price)
        get_discount, discount = self.get_discount(self.total_order)
        self.final_order = self.total_order - discount

        if get_discount == True:
            print(f"Total belanja anda adalah Rp {self.total_order :,} sehingga anda mendapatkan discount sebesar Rp {discount :,}. \n Total belanja setelah discount adalah Rp {self.final_order :,}")
        else:
            print(f"Total belanja anda adalah {self.total_order :,}")

    def get_discount(self, total_order):
        self.total_order = total_order
        if self.total_order <= 200_000:
            get_discount = False
            discount = 0
        else:
            get_discount = True
            if self.total_order > 500_000:
                discount = 0.1 * self.total_order
            elif self.total_order > 300_000:
                discount = 0.08 * self.total_order
            elif self.total_order > 200_000:
                discount = 0.05 * self.total_order

        return get_discount, discount